name: Build, Test and Analyze

on: push

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Node 18
        uses: actions/setup-node@v1
        with:
          node-version: 18.x

      - name: Prepare
        run: npm ci

      - name: Build
        run: npm run build

      - name: Test
        run: npm run test

      - name: Setup FFMPEG
        uses: FedericoCarboni/setup-ffmpeg@v1
        with:
          # Not strictly necessary, but it may prevent rate limit
          # errors especially on GitHub-hosted macos machines.
          token: ${{ secrets.GITHUB_TOKEN }}
        id: setup-ffmpeg

      # ───────────────────────────────────────────────────────────────────────────────
      # ▼ BEGIN E2E‐RELATED STEPS ▼
      # ───────────────────────────────────────────────────────────────────────────────

      # 1. Install http-server globally (so that `npx http-server` is instant and doesn't try to
      #    download on the fly in each test file). If you prefer to keep it as a devDependency,
      #    you can `npm install -D http-server` instead; the key is that the command must exist.
      - name: Install http-server
        run: npm install -g http-server

      # 2. Install Playwright’s browsers + Linux deps in one shot.
      #    (This is the modern replacement for `microsoft/playwright-github-action@v1` with `--with-deps`.)
      - name: Install Playwright browsers & system dependencies
        run: npx playwright install --with-deps

      # 3. Start both static servers (on 1234 and 4321) in the background.
      #    We assume your “examples” folder (containing dapp.html, wallet.html, etc.) lives
      #    under e2e/examples. Adjust “examples” to your actual path if it’s different.
      - name: Start static servers for E2E
        run: |
          # Serve “examples” on port 1234 (for the dapp) and port 4321 (for the wallet)
          http-server e2e/examples -p 1234 &
          http-server e2e/examples -p 4321 &
          # Give those servers a moment to boot up before running tests
          sleep 2

      # 4. Run all Playwright E2E tests (using xvfb‐run so that any “headed” browsers can launch).
      #    We point Playwright at “e2e” (so it only runs *.spec.ts under e2e/).
      #    You can limit to a single worker if you prefer: “--workers=1”
      - name: Run E2E tests
        run: |
          xvfb-run --auto-servernum --server-args="-screen 0 1280x720x24" \
            npx playwright test e2e

      # ───────────────────────────────────────────────────────────────────────────────
      # ▼ END E2E‐RELATED STEPS ▼
      # ───────────────────────────────────────────────────────────────────────────────

      # - name: Upload
      #   uses: actions/upload-artifact@v1
      #   with:
      #     name: video
      #     path: e2e/output/combined.webm

      # - name: Analyze with SonarCloud
      #   uses: sonarsource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
